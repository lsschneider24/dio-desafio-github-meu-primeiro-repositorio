Introdução ao Git: Entendendo o que é Git e sua importância.
O git é um software desenvolvido em 2005, por Linus Torvalds, para a construção de projetos, como sites, códigos ou softwares, onde vários desenvolvedores podem trabalhar ao mesmo tempo, de maneira rápida, inteligente e eficiente.
A funcionalidade que se destaca no git é o seu sistema de controle de alterações. Quando alguém muda o código, por exemplo, é gerada uma nova versão do projeto, sem ter o risco de perder qualquer informação. Todas essas versões são salvas em um repositório, sobre o qual explicaremos com mais detalhes, ainda neste artigo.
Mesmo o trabalho eficiente em equipe sendo a maior característica do software, muitos desenvolvedores também o utilizam para fins individuais, pelo fato de oferecer diversos recursos que permitem a construção de ótimos projetos.(ref:https://www.digitalhouse.com/br/blog/o-que-e-github/#:~:text=significam%20juntos%2C%20plenamente.-,Git,sistema%20de%20controle%20de%20alterações.)


Primeiros comandos com Git:
Navegação via command line interface e instalação: Comandos básicos para um bom desempenho no terminal. 
Comandos Git mais utilizados e como configurar
Comandos-git
Figurando entre os sistemas de controle de versão open source mais usados no mundo, o Git é visto hoje como uma ferramenta fundamental para a otimização de projetos. Mas, para usá-lo com sucesso, é preciso estar familiarizado com os principais comandos Git.
Para quem está iniciando nesta jornada, o começo provavelmente será bastante confuso e desafiador. As chances de você usar um comando e ele não dar certo logo de cara é bem grande no início, mas isso não é motivo para desanimar: o processo é o mesmo pra todo mundo!
Embora “quebrar a cabeça” para descobrir o que deu errado seja parte do caminho, não significa que a gente não possa te ajudar a passar por ele com mais facilidade, né? Pensando nisso, preparei um compilado sobre os comandos Git mais usados. 
Git, SVN e CVS— comparação das principais ferramentas de controle de versão de software: 
1 O que é o Git
2 Porque preciso dos comandos Git
3 Como começar com comandos Git
3.1 Git Status
3.2 Os commits
3.3 Git log
4 13 comandos Git mais usados
4.1 Git init
4.2 Git clone
4.3 Git branch
4.4 Git checkout
4.5 Git status
4.6 Git diff
4.7 Git add
4.8 Git commit
4.9 Git push
4.10 Git pull
4.11 Git revert
4.12 Git merge
4.13 Git stash
O que é o Git
Como dissemos na abertura deste post, o Git é um sistema distribuído opensource de controle de versão – o mais popular do mundo, diga-se de passagem.
Apesar de ser usado para registrar o histórico de edições de qualquer tipo de arquivo, incluindo trabalhos de TCC e monografias de doutorado, a adoção mais ampla desta ferramenta se dá na área de desenvolvimento de software.
Dentro deste universo, o objetivo do Git é registrar todas as mudanças feitas no código-fonte de um projeto, evitando que algo importante se perca no meio do caminho.
Para entender melhor como isso funciona, vale destrinchar o significado de “sistema distribuído opensource de controle de versão”: 
Ser opensource significa que o Git é um software de livre utilização, ou seja, permite que qualquer pessoa com conhecimentos de programação use-o, modifique-o e aprimore-o;
Dizer que o Git faz controle de versões é a mesma coisa que dizer que ele armazena conteúdo e mantém um histórico das alterações feitas nele (seja por um usuário só ou muitos);
E, finalmente, o fato de ser um sistema distribuído significa que cada diretório de trabalho do Git é um repositório com um histórico completo e habilidade total de acompanhamento das revisões, independente de acesso a uma rede ou a um servidor central. Cada desenvolvedor tem, na sua máquina, acesso ao histórico completo do código trabalhado.
Porque preciso dos comandos Git
Antes de falarmos sobre os melhores comandos Git, é oportuno esclarecer essa dúvida tão comum que, inclusive, explica um pouco do sucesso desta ferramenta. 
Então, em primeiro lugar, sistemas como o Git existem para o código não virar uma bagunça quando há mais de uma pessoa trabalhando nele simultaneamente. 
Pode ser também que, ao longo do projeto, surja a necessidade de voltar para uma versão anterior. Logo, ter esse controle das alterações dá muito mais segurança pra quem está trabalhando.
Outra situação comum é o de equipes trabalharem paralelamente com projetos que tenham uma base de código comum. Neste caso, a capacidade do Git de criar ramificações passa a ser bastante útil!
Como começar com comandos Git
A partir de agora, vou explicar como usar os comandos git, de fato. E, para isso, utilizarei o VSCode como editor padrão. 
Caso você queira configurá-lo aí também, confira o link a seguir: Visual Studio Code + Git: como transformar o VSCode no editor padrão. 
Feito isso, o próximo passo é abrir o arquivo .gitconfig, responsável pelas opções de configuração do GIT, utilizando no terminal o comando:
git config --global -e
No arquivo de configuração, devemos encontrar a sessão Alias.
Caso essa sessão não exista no .gitconfig, realize a declaração desta nova sessão no final do arquivo, procedendo com a inclusão da expressão alias entre colchetes.
Após a declaração da sessão, podemos proceder com a configuração de nosso primeiro atalho para os métodos do Git.
Git Status
Para começar, iremos criar um atalho para o comando git status, cujo objetivo é exibir as condições do diretório de trabalho e da área de staging.
Em outras palavras, ele permite inspecionar quais alterações foram despreparadas, quais não foram e quais arquivos não estão sendo monitorados pelo Git. 
Ao executar o comando git status, é possível obter o status completo do repositório (diretório onde os arquivos do seu projeto serão armazenados). 
git status
Mas ao adotar o parâmetro -s no final do atalho criado, cria-se um status resumido, resultando em maior dinamismo.
Veja como fica:
s = !git status -s
comando git status 
Obs.: é recomendável verificar as condições do repositório antes das alterações receberem commit, sobre o qual falamos na sequência.
Os commits
O segundo atalho que vamos criar será para o nosso processo de commit, nome dado a um conjunto de alterações feitas em um projeto. 
Nesta configuração, utilizaremos os parâmetros –all, que adiciona todos os arquivos para o staged de mudanças, e logo em seguida (&&) executar o commit com o parâmetro –m, que permite incluir a mensagem descritiva do nosso commit.
c = !git add --all && git commit -m
Lembre-se que caso você não queira adicionar todos os arquivos alterados para o processo de commit, deve-se incluir individualmente os arquivos que desejar com o comando tradicional git add [nome do arquivo] e depois executar o comando git commit -m “[Mensagem Descritiva]”.
Ou seja, o processo tradicional.
Git log
Também incluiremos o atalho para o comando git log (que permite ver o histórico de commits ou um específico), utilizando opções de personalização do comando para uma visualização mais amigável e descritiva.
Para isso utilizaremos o parâmetro –prety=format: que permitirá customizarmos a apresentação de nossos logs a partir do atalho que criarmos, com algumas opções específicas:
%h: o percentual com a letra h minúscula irá apresentar o hash reduzido do commit;
%d: o percentual com a letra d minúscula irá mostrar a branch e também a tag do commit (caso exista);
%s: o percentual coma letra s minúscula (de subject) irá demonstrar a mensagem do commit;
%cn: nome da pessoa que realizou o commit;
%cr: a data relativa do commit.
Também utilizaremos a opção de utilizar cores diferentes para cada coluna, o que facilita a visualização, utilizando o parâmetro % com a letra C maiúscula (%C) seguido da cor que desejamos entre parênteses (blue).
Assim:
l = !git log --pretty=format:'%C(blue)%h%C(red)%d %C(white)%s - %C(cyan)%cn, %C(green)%cr'
git log
Após todas essa etapas, o arquivo .gitconfig ficará desta forma:
conclusão do gitconfig
Assim, concluímos a configuração dos atalhos básicos. Mas é claro que não vamos parar por aí…
Agora que você já sabe quais são os comandos básicos Git, chegou a hora de conhecer também outros atalhos que farão toda a diferença no seu dia a dia de trabalho. Confira!
13 comandos Git mais usados
Git init
Para começar um projeto que ainda não seja um repositório (ou repo), o Git Init costuma ser o comando mais indicado. 
Basicamente, ele cria um repositório vazio ou transforma uma pasta que você já tem e que não está com controle de versão em um repositório:
git init
Com sua pasta de trabalho devidamente iniciada, é hora de começar a preenchê-la.
Git clone
O Git clone é um comando para baixar o código-fonte existente de um repositório remoto (como o Github, por exemplo).
Existem algumas maneiras de baixar o código-fonte, mas eu prefiro o clone com o modo https:
git clone <https://url-do-link>
Quando você clonar um repositório, o código é copiado para a o seu computador e continua linkado ao original, como foi explicado lá na descrição do que é um sistema distribuído.
Se você quiser desvincular a sua cópia do original, rode o comando abaixo:
git remote rm origin
Git branch
Com as branches (ou ramificações), vários desenvolvedores podem trabalhar paralelamente no mesmo projeto. Assim, cada um pode codar a sua parte sem que haja confusão! 
Funciona basicamente da seguinte forma: a cada alteração realizada no código, seja para adicionar um novo recurso ou até mesmo corrigir um erro, cria-se um novo ponto de ramificação que consolida essas mudanças, sem interferir nos arquivos originais. 
Considerado um dos comandos Git mais importantes, o branch pode ser usado para três finalidades diferentes: criar, listar e excluir ramificações. Veja, na sequência, como trabalhar com cada uma delas.Para criar uma nova branch local, digite:
git branch <nome-da-branch>
Este comando criará uma branch local. Para upar a nova branch para o repositório remoto, você precisa usar o seguinte comando:
git push -u <remote> <nome-da-branch>
Para ver as ramificações, por sua vez, use:
git branch
ou
git branch --list
Por último, delete uma branch a partir do comando:
git branch -d <nome-da-branch>
Git checkout
Esse é um dos comandos git mais utilizados. Para trabalhar em uma branch, primeiro você precisa mudar para ela. Apesar de parecer algo óbvio, não ir para a branch que você acabou de criar e na qual quer trabalhar é um erro bastante comum no começo.
Neste contexto, o principal objetivo do git checkout é ajudar você a mudar de uma branch para outra ou então verificar arquivos e commits:
git checkout <nome-da-ramificação>
Há ainda um comando de atalho que te permite criar e ir para um branch de uma vez só:
git checkout -b <nome-da-branch>
Git status
Sim, já falamos sobre ele, mas vale retomar: o comando Git status serve para fornecer algumas informações importantes sobre a branch em que você estiver no momento, incluindo se ela está atualizada em relação à master e quais arquivos foram alterados.
git status
Git diff
Apesar de o git status fornecer muitas informações relevantes, às vezes é preciso ir além.  
Caso você queira, por exemplo, saber exatamente o que você alterou (e não apenas quais arquivos foram alterados), o melhor a se fazer é utilizar o comando:
git diff
Basicamente, sua execução realiza uma função de comparação nas fontes de dados Git e mostra quais linhas foram adicionadas e removidas.
Git add
Quando criamos, modificamos ou excluímos um arquivo, essas alterações ocorrerão em nosso ambiente local e não serão incluídas no próximo commit (a menos que alteremos as configurações).
Para incluir as alterações de um arquivo em nosso próximo commit, será preciso usar o comando git add.
Para adicionar apenas um arquivo:
git add <arquivo>
Para adicionar, de uma vez, todos os arquivos modificados:
git add -A
Vale lembrar que o comando git add não altera o repositório e as alterações não são salvas até usarmos o git commit.
Git commit
Relembrando, esse comando visa definir um ponto de verificação no processo de desenvolvimento, para o qual você pode voltar mais tarde, se necessário.
git commit -m "mensagem explicando a mudança no código"
Git push
Após confirmar as alterações, a próxima coisa que você deseja fazer é enviar as alterações para o servidor remoto usando o comando git push:
git push <remote> <nome-do-branch>
No entanto, se seu branch for criado recentemente, você também precisará fazer upload do branch com o seguinte comando:
git push -u origin <nome-do-branch>
Git pull
O git pull é usado para obter atualizações do repositório remoto. 
Trata-se de um comando que depende do referencial de onde ele foi feito, ou seja, um git pull feito da sua máquina vai puxar informações do repositório original para ela. Mas um git pull feito a partir do repositório original vai puxar as informações da sua máquina. Percebe?
Este comando é uma combinação de git fetch (baixa as alterações do repositório remoto, mas não as mescla com o seu) e git merge (que mescla tudo junto).
Isso significa que, quando usamos o git pull, ele recebe as atualizações do repositório remoto (git fetch) e aplica imediatamente as alterações mais recentes no seu local (git merge).
git pull <remote>
Git revert
Existem várias maneiras de desfazer nossas alterações local ou remotamente (dependendo da necessidade), mas devemos usar esses comandos com cuidado para evitar problemas.
Uma maneira segura de desfazer os commits é usando git revert.
git revert 'número do hash'
O número do hash pode ser conseguido pelo comando:
git log -- oneline
Git merge
Quando você conclui o desenvolvimento em sua branch e tudo funciona bem, sem conflitos, a etapa final é mesclar as branches, isso é feito com o comando git merge.
Como falamos no tópico sobre git pull, esse comando vai mesclar, no seu repositório local, todas as alterações feitas.
git merge <nome-da-branch>
Git stash
Sabe quando você está trabalhando em uma parte do projeto que não está fluindo como deveria e, então, decide mudar de branch por um tempo para trabalhar em outra coisa?
Bom, quando isso acontece não é preciso necessariamente fazer o commit. Com o comando git stash, existe a possibilidade de apenas arquivar as alterações que você fez na cópia de trabalho durante um determinado período para que seja possível retornar a ela mais tarde.
Para salvar as alterações sem commit, basta executar:
git stash
Já para ver todas as stashes que você guardou, use:
git stash list
Por último, você também pode aplicar stashes antigos, especificando:
it stash apply stash@{2}.
(ref:https://blog.geekhunter.com.br/comandos-git-mais-utilizados/)

Realizando a instalação do GIT:
Como instalar
O primeiro passo para instalação do Git em sua máquina, é acessar o seu site para realizar o download do Git.(https://git-scm.com/)
Em seu site você encontra toda documentação, comunidade, download (para diferentes sistemas operacionais - Windows, Mac e Linux), empresas e projetos que utilizam o Git (Google, Facebook, Twitter, Netflix, entre outras) e muito mais.(Ref:https://www.treinaweb.com.br/blog/primeiros-passos-com-o-git)

Entendendo como o Git funciona por baixo dos panos:site learngitbranching(https://learngitbranching.js.org/?locale=pt_BR) Nele você vai aprender de forma visual como o git age por baixo dos panos e os conceitos de branch/merge. Cada desafio é composto por níveis e ao completar todos os desafios vamos conseguir utilizar o git com muito mais facilidade.

Ciclo de vida dos arquivos no Git:
Muitos seguem suas vidas normalmente com a sequência pull > modificação > commit > push, de fato, muito do seu dia-a-dia será praticamente isso, porém, nem sempre tudo ocorre como esperamos e saímos um pouco do comum quando, por exemplo, esquecemos de adicionar algo no commit, ou quando queremos desfazer algo, e até mesmo em um merge que alterou tantos lugares diferentes que dói a cabeça só de pensar.

Quantas vezes já ficou um bom tempo debruçado no micro tentando desfazer algo sem perder o trabalho de horas? Quantas vezes ficou procurando no Google por comandos salvadores que revertesse tudo como passe de mágica? Quantas vezes decidiu que a única solução era clonar de novo o repositório e refazer tudo?

Pode nunca ter acontecido com você, mas acontece com bastante gente e, em muitos dos casos, o motivo é simples falta de compreensão do ciclo de vida dos arquivos.

Estados dos arquivos no git
Os arquivos no Git sempre se encontram em algum estado: untracked, unmodified, modified e stage. Entender esses estados nos ajuda a saber melhor qual o momento certo de usar cada comando.

git ciclo de vida 02Untracked
Arquivos marcados como untracked são arquivos não monitorados pelo Git. Os arquivos que acabaram de ser criados sempre estarão com esse estado. Vamos criar um arquivo chamado arq01 e usar o comando git status para verificar o que ocorreu no repositório:

 git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git git
$ touch arq01
$ git status arq01
No ramo master
Submissão inicial.

Arquivos não monitorados: (utilize git add <arquivo> para incluir o que será submetido)

Para que o Git comece a versionar o arquivo precisamos mudá-lo para stage. Note que o Git sempre vai te dar a dica do que fazer quando executar o git status:

$ git add arq01
$ git status
No ramo master
Submissão inicial.

Mudanças a serem submetidas:
(utilize “git rm –cached <arquivo>…” para não apresentar)

new file: arq01

Como podemos ver, o estado do arquivo mudou. O Git já o reconhece e ele está pronto para ser salvo.

Stage

Os arquivos marcados como stage são os arquivos novos ou modificados que serão salvos no próximo commit. O que o comando anterior git add faz é adicionar os arquivos de untracked e modified para stage.

Precisamos agora dar o comando git commit para salvar a nova versão do repositório:

$ git commit -m ‘Meu primeiro commit’

[master (root-commit) 2003295] Meu primeiro commit

1 file changed, 0 insertions(+), 0 deletions(-)

create mode 100644 arq01

Unmodified

Quando realizamos um commit, os arquivos saem de stage para unmodified, isso significa que, na linha do tempo, seu arquivo está igual ao estado salvo no último commit.

No commit, salvamos o estado do repositório e o Git passa a informar das mudanças do último commit (HEAD) em diante.

$ git status

No ramo master

nada a submeter, diretório de trabalho vazio

Modified

São os arquivos já monitorados pelo Git que sofreram alguma alteração desde o último commit:

$ echo ‘uma linha’ >> arq01

$ git status

No ramo master

Changes not staged for commit:

(utilize “git add <arquivo>…” para atualizar o que será submetido)

(utilize “git checkout — <arquivo>…” para descartar mudanças no diretório de trabalho)

modified: arq01

Se quisermos salvar a alteração, basta mudar o arquivo para a área de stage com o comando git add e depois git commit para gerar a nova versão com as mudanças:

$ git add arq01

$ git status

No ramo master

Mudanças a serem submetidas:

(use “git reset HEAD <file>…” to unstage)

modified: arq01

$ git commit -m ‘Nova mudança’

[master fd009e0] Nova mudança

1 file changed, 1 insertion(+)

Desfazendo as coisas

Agora que entendemos melhor os estados, podemos entender como reverter cada um deles.

Seguindo na ordem anterior, para desfazer um arquivo untracked você precisa apenas remover o arquivo. Como ele ainda não foi adicionado no Git, caso seja removido ele não sentirá falta.

Depois, caso tenha adicionado o arquivo novo em stage e queira remover ele de lá, basta utilizar o comando git reset HEAD <filename>. Este comando retornará o arquivo de stage para untracked (caso seja um arquivo novo) ou modified (caso seja um arquivo que já existia mas foi modificado).

$ echo “Segunda linha” >> arq01

$ git add arq01

$ git status

No ramo master

Mudanças a serem submetidas:

(use “git reset HEAD <file>…” to unstage)

modified: arq01

$ git reset HEAD arq01

Unstaged changes after reset:

M arq01

$ git status

No ramo master

Changes not staged for commit:

(utilize “git add <arquivo>…” para atualizar o que será submetido)

(utilize “git checkout — <arquivo>…” para descartar mudanças no diretório de trabalho)

modified: arq01

Se observarmos, no último git status já temos uma dica do Git como retornar arquivos de modified para unmodified: git checkout <filename>:

gabriel@Bilbo:/tmp/git$ git checkout arq01

gabriel@Bilbo:/tmp/git$ git status

No ramo master

nada a submeter, diretório de trabalho vazio

Esse comando retornará o arquivo para a versão do último commit. Cuidado com ele, você pode perder todo o trabalho realizado.

Por último, mas não menos importante, podemos também remover ou desfazer os commits, mantendo ou não o histórico do que já foi feito.

Para remover o commit faça:

$ git reset HEAD~1

Cada número que colocar depois do HEAD é um commit que quer remover. Neste caso estamos removendo um commit para trás. Poderia ser quantos quisesse ou quantos estivessem disponíveis. Quando executamos esse comando, as alterações vão todas para modified. Você pode alterar algo específico e dar o commit de novo ou remover todas as mudanças com o git checkout.(Ref:https://blog.4linux.com.br/git-ciclo-de-vida/).

Introdução ao GitHub:(https://docs.github.com/pt/get-started/quickstart)

Resolvendo conflitos:
Resolver um conflito de merge no GitHub
Você pode resolver conflitos de merge simples que envolvem alterações concorrentes na linha usando o editor de conflitos.

Você só pode resolver conflitos de merge no GitHub AE causados por alterações concorrentes na linha, como quando as pessoas fazem alterações diferentes na mesma linha do mesmo arquivo em diferentes branches no seu repositório Git. Para todos os outros tipos de conflito de merge, você deve resolver o conflito localmente na linha de comando. Para obter mais informações, confira "Como resolver um conflito de mesclagem usando a linha de comando".

Se um administrador do site desabilitar o editor de conflitos de mesclagem em solicitações de pull entre repositórios, você não poderá usar o editor de conflitos no GitHub AE e precisará resolver os conflitos de mesclagem na linha de comando. Por exemplo, se o editor de conflitos de merge estiver desabilitado, você não poderá usá-lo em uma pull request entre uma bifurcação e um repositório upstream.

Aviso: quando você resolve um conflito de mesclagem no GitHub AE, todo o branch base da solicitação de pull é mesclado no branch principal. Verifique se você deseja realmente fazer commit para esse branch. Se o branch do cabeçalho for o branch-padrão do seu repositório, você terá a opção de criar um novo branch para servir como o branch do cabeçalho para o seu pull request. Se o branch head estiver protegido, você não será capaz de mesclar sua resolução de conflitos nele, então você será solicitado a criar um novo branch head. Para obter mais informações, confira "Sobre os branches protegidos".

Abaixo do nome do repositório, clique em  Solicitações de pull.
Seleção da guia Solicitações de pull

Na lista "Pull Requests", clique na pull request que tem um conflito de merge que você deseja resolver.

Na parte inferior da solicitação de pull, clique em Resolver conflitos.
Botão Resolver conflitos de mesclagem

Dica: se o botão Resolver conflitos for desativado, o conflito de mesclagem da solicitação de pull será muito complexo de ser resolvido no GitHub AE ou o administrador do site desabilitou o editor de conflitos para solicitações de pull entre repositórios. Você deve resolver o conflito de merge usando um cliente Git alternativo, ou usando o Git na linha de comando. Para obter mais informações, confira "Como resolver um conflito de mesclagem usando a linha de comando".

1. Decida se você deseja manter apenas as alterações do seu branch, manter apenas as alterações do outro branch, ou fazer uma nova alteração, que pode incorporar alterações de ambos os branches. Exclua os marcadores de conflito `<<<<<<<`, `=======`, `>>>>>>>` e faça as alterações desejadas na mesclagem final. ![Ver exemplo de conflito de mesclagem com marcadores de conflito](/assets/images/help/pull_requests/view-merge-conflict-with-markers.png)
Se houver mais de um conflito de merge no arquivo, role para baixo até o próximo conjunto de marcadores de conflito e repita as etapas quatro e cinco para resolver o conflito de merge.

Depois de resolver todos os conflitos no arquivo, clique em Marcar como resolvido.
Clique no botão Marcar como resolvido

Se você tiver mais de um arquivo com um conflito, selecione o próximo arquivo que deseja editar no lado esquerdo da página abaixo de "conflicting files" (arquivos conflitantes) e repita as etapas de quatro a sete até resolver todos os conflitos de merge da pull request.
Seleção do próximo arquivo conflitante, se aplicável

Depois de resolver todos os conflitos de mesclagem, clique em Fazer commit da mesclagem. Isso incorpora todo o branch base ao branch head.
Botão Resolver conflitos de mesclagem

Se solicitado, revise o branch presente no commit.

Se o branch head for o branch padrão do repositório, você pode escolher atualizar este branch com as mudanças que você fez para resolver o conflito, ou criar um novo branch e usar isso como o branch head da pull request.
Solicitar a revisão do branch que será atualizado

Se você escolher criar um novo branch, digite um nome para o branch.

Se o branch head de sua pull request estiver protegido, você deve criar um novo branch. Você não terá a opção de atualizar o branch protegido.

Clique em Criar branch e atualizar minha solicitação de pull ou Entendi. Continuar atualizando o BRANCH. O texto do botão corresponde à ação que você está executando.

Para mesclar sua solicitação de pull, clique em Mesclar solicitação de pull. Para obter mais informações sobre outras opções de mesclagem de solicitação de pull, confira "Como mesclar uma solicitação de pull(https://docs.github.com/pt/github-ae@latest/articles/merging-a-pull-request)".(Ref:https://docs.github.com/pt/github-ae@latest/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-on-github).